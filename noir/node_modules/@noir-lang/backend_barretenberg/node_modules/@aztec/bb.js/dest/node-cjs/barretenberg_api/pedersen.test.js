"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = require("../barretenberg/index.js");
const index_js_2 = require("../types/index.js");
describe('pedersen', () => {
    let api;
    beforeAll(async () => {
        api = await index_js_1.Barretenberg.new(1);
        await api.pedersenHashInit();
    }, 30000);
    afterAll(async () => {
        await api.destroy();
    });
    it('pedersenCompressFields', async () => {
        const result = await api.pedersenCompressFields(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        expect(result).toEqual(new index_js_2.Fr(16672613430297770667465722499387909817686322516130512258122141976728892914370n));
    });
    it('pedersenPlookupCompressFields', async () => {
        const result = await api.pedersenPlookupCompressFields(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        expect(result).toEqual(new index_js_2.Fr(21568810706345846819294487214368613840251909831689369685420108292337497444070n));
    });
    it('pedersenCompress', async () => {
        const result = await api.pedersenCompress([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(20749503715308760529311051818180468653739005441229560405092292242074298877245n));
    });
    it('pedersenPlookupCompress', async () => {
        const result = await api.pedersenPlookupCompress([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(4213911891650716450883144878301329379460622830501147795631256054071351353887n));
    });
    it('pedersenCompressWithHashIndex', async () => {
        const result = await api.pedersenCompressWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 7);
        expect(result).toEqual(new index_js_2.Fr(11068631634751286805527305272746775861010877976108429785597565355072506728435n));
    });
    it('pedersenCommit', async () => {
        const result = await api.pedersenCommit([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(20749503715308760529311051818180468653739005441229560405092292242074298877245n));
    });
    it('pedersenPlookupCommit', async () => {
        const result = await api.pedersenPlookupCommit([new index_js_2.Fr(4n), new index_js_2.Fr(8n)]);
        expect(result).toEqual(new index_js_2.Fr(21568810706345846819294487214368613840251909831689369685420108292337497444070n));
    });
    it('pedersenBufferToField', async () => {
        const result = await api.pedersenBufferToField(Buffer.from('Hello world! I am a buffer to be converted to a field!'));
        expect(result).toEqual(new index_js_2.Fr(4923399520610513632896240312051201308554838580477778325691012985962614653619n));
    });
    it('pedersenHashPair', async () => {
        const result = await api.pedersenHashPair(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        expect(result).toEqual(new index_js_2.Fr(7508407170365331152493586290597472346478280823936748458450026785528968221772n));
    });
    it('pedersenHashMultiple', async () => {
        const result = await api.pedersenHashMultiple([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(641613987782189905475142047603559162464012327378197326488471789040703504911n));
    });
    it('pedersenHashMultipleWithHashIndex', async () => {
        const result = await api.pedersenHashMultipleWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 7);
        expect(result).toEqual(new index_js_2.Fr(14181105996307540196932058280391669339364159586581375348016341320932872505408n));
    });
    it('pedersenHashToTree', async () => {
        const result = await api.pedersenHashToTree([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n), new index_js_2.Fr(16n)]);
        expect(result).toEqual([
            new index_js_2.Fr(4n),
            new index_js_2.Fr(8n),
            new index_js_2.Fr(12n),
            new index_js_2.Fr(16n),
            new index_js_2.Fr(7508407170365331152493586290597472346478280823936748458450026785528968221772n),
            new index_js_2.Fr(61370238324203854110612958249832030753990119715269709182131929073387209477n),
            new index_js_2.Fr(7696240979753031171651958947943309270095593128155855154123615677953596407768n),
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVkZXJzZW4udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iYXJyZXRlbmJlcmdfYXBpL3BlZGVyc2VuLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBd0Q7QUFDeEQsZ0RBQXVDO0FBRXZDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLElBQUksR0FBaUIsQ0FBQztJQUV0QixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsR0FBRyxHQUFHLE1BQU0sdUJBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFVixRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsc0JBQXNCLENBQUMsSUFBSSxhQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxhQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksYUFBRSxDQUFDLDhFQUE4RSxDQUFDLENBQUMsQ0FBQztJQUNqSCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3QyxNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLGFBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLGFBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9FLE1BQU0sQ0FBQyxNQUFNLENB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